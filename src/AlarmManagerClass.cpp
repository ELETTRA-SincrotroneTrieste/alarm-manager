/*----- PROTECTED REGION ID(AlarmManagerClass.cpp) ENABLED START -----*/
//=============================================================================
//
// file :        AlarmManagerClass.cpp
//
// description : C++ source for the AlarmManagerClass.
//               A singleton class derived from DeviceClass.
//               It implements the command and attribute list
//               and all properties and methods required
//               by the AlarmManager once per process.
//
// project :     AlarmManager
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
//
// Elettra-Sincrotrone Trieste S.C.p.A. di interesse nazionale
// Strada Statale 14 - km 163,5 in AREA Science Park
// 34149 Basovizza, Trieste ITALY
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#include <AlarmManagerClass.h>

/*----- PROTECTED REGION END -----*/	//	AlarmManagerClass.cpp

//-------------------------------------------------------------------
/**
 *	Create AlarmManagerClass singleton and
 *	return it in a C function for Python usage
 */
//-------------------------------------------------------------------
extern "C" {
#ifdef _TG_WINDOWS_

__declspec(dllexport)

#endif

	Tango::DeviceClass *_create_AlarmManager_class(const char *name) {
		return AlarmManager_ns::AlarmManagerClass::init(name);
	}
}

namespace AlarmManager_ns
{
//===================================================================
//	Initialize pointer for singleton pattern
//===================================================================
AlarmManagerClass *AlarmManagerClass::_instance = NULL;

//--------------------------------------------------------
/**
 * method : 		AlarmManagerClass::AlarmManagerClass(string &s)
 * description : 	constructor for the AlarmManagerClass
 *
 * @param s	The class name
 */
//--------------------------------------------------------
AlarmManagerClass::AlarmManagerClass(string &s):Tango::DeviceClass(s)
{
	cout2 << "Entering AlarmManagerClass constructor" << endl;
	set_default_property();
	get_class_property();
	write_class_property();

	/*----- PROTECTED REGION ID(AlarmManagerClass::constructor) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	AlarmManagerClass::constructor

	cout2 << "Leaving AlarmManagerClass constructor" << endl;
}

//--------------------------------------------------------
/**
 * method : 		AlarmManagerClass::~AlarmManagerClass()
 * description : 	destructor for the AlarmManagerClass
 */
//--------------------------------------------------------
AlarmManagerClass::~AlarmManagerClass()
{
	/*----- PROTECTED REGION ID(AlarmManagerClass::destructor) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	AlarmManagerClass::destructor

	_instance = NULL;
}


//--------------------------------------------------------
/**
 * method : 		AlarmManagerClass::init
 * description : 	Create the object if not already done.
 *                  Otherwise, just return a pointer to the object
 *
 * @param	name	The class name
 */
//--------------------------------------------------------
AlarmManagerClass *AlarmManagerClass::init(const char *name)
{
	if (_instance == NULL)
	{
		try
		{
			string s(name);
			_instance = new AlarmManagerClass(s);
		}
		catch (bad_alloc &)
		{
			throw;
		}
	}
	return _instance;
}

//--------------------------------------------------------
/**
 * method : 		AlarmManagerClass::instance
 * description : 	Check if object already created,
 *                  and return a pointer to the object
 */
//--------------------------------------------------------
AlarmManagerClass *AlarmManagerClass::instance()
{
	if (_instance == NULL)
	{
		cerr << "Class is not initialised !!" << endl;
		exit(-1);
	}
	return _instance;
}



//===================================================================
//	Command execution method calls
//===================================================================
//--------------------------------------------------------
/**
 * method : 		LoadClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *LoadClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "LoadClass::execute(): arrived" << endl;
	((static_cast<AlarmManager *>(device))->load());
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		RemoveClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *RemoveClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "RemoveClass::execute(): arrived" << endl;
	Tango::DevString argin;
	extract(in_any, argin);
	((static_cast<AlarmManager *>(device))->remove(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		ModifyClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *ModifyClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "ModifyClass::execute(): arrived" << endl;
	((static_cast<AlarmManager *>(device))->modify());
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		GetAlarmInfoClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *GetAlarmInfoClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "GetAlarmInfoClass::execute(): arrived" << endl;
	const Tango::DevVarStringArray *argin;
	extract(in_any, argin);
	return insert((static_cast<AlarmManager *>(device))->get_alarm_info(argin));
}

//--------------------------------------------------------
/**
 * method : 		SearchAlarmNameClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *SearchAlarmNameClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "SearchAlarmNameClass::execute(): arrived" << endl;
	Tango::DevString argin;
	extract(in_any, argin);
	return insert((static_cast<AlarmManager *>(device))->search_alarm_name(argin));
}

//--------------------------------------------------------
/**
 * method : 		ReLoadAllClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *ReLoadAllClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "ReLoadAllClass::execute(): arrived" << endl;
	((static_cast<AlarmManager *>(device))->re_load_all());
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		ResetStatisticsClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *ResetStatisticsClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "ResetStatisticsClass::execute(): arrived" << endl;
	((static_cast<AlarmManager *>(device))->reset_statistics());
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		LoadConfClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *LoadConfClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "LoadConfClass::execute(): arrived" << endl;
	Tango::DevString argin;
	extract(in_any, argin);
	((static_cast<AlarmManager *>(device))->load_conf(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		SearchAlarmConfClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *SearchAlarmConfClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "SearchAlarmConfClass::execute(): arrived" << endl;
	Tango::DevString argin;
	extract(in_any, argin);
	return insert((static_cast<AlarmManager *>(device))->search_alarm_conf(argin));
}

//--------------------------------------------------------
/**
 * method : 		ModifyConfClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *ModifyConfClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "ModifyConfClass::execute(): arrived" << endl;
	Tango::DevString argin;
	extract(in_any, argin);
	((static_cast<AlarmManager *>(device))->modify_conf(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		AddArchiverClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *AddArchiverClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "AddArchiverClass::execute(): arrived" << endl;
	const Tango::DevVarStringArray *argin;
	extract(in_any, argin);
	((static_cast<AlarmManager *>(device))->add_archiver(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		RenameClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *RenameClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "RenameClass::execute(): arrived" << endl;
	const Tango::DevVarStringArray *argin;
	extract(in_any, argin);
	((static_cast<AlarmManager *>(device))->rename(argin));
	return new CORBA::Any();
}


//===================================================================
//	Properties management
//===================================================================
//--------------------------------------------------------
/**
 *	Method      : AlarmManagerClass::get_class_property()
 *	Description : Get the class property for specified name.
 */
//--------------------------------------------------------
Tango::DbDatum AlarmManagerClass::get_class_property(string &prop_name)
{
	for (unsigned int i=0 ; i<cl_prop.size() ; i++)
		if (cl_prop[i].name == prop_name)
			return cl_prop[i];
	//	if not found, returns  an empty DbDatum
	return Tango::DbDatum(prop_name);
}

//--------------------------------------------------------
/**
 *	Method      : AlarmManagerClass::get_default_device_property()
 *	Description : Return the default value for device property.
 */
//--------------------------------------------------------
Tango::DbDatum AlarmManagerClass::get_default_device_property(string &prop_name)
{
	for (unsigned int i=0 ; i<dev_def_prop.size() ; i++)
		if (dev_def_prop[i].name == prop_name)
			return dev_def_prop[i];
	//	if not found, return  an empty DbDatum
	return Tango::DbDatum(prop_name);
}

//--------------------------------------------------------
/**
 *	Method      : AlarmManagerClass::get_default_class_property()
 *	Description : Return the default value for class property.
 */
//--------------------------------------------------------
Tango::DbDatum AlarmManagerClass::get_default_class_property(string &prop_name)
{
	for (unsigned int i=0 ; i<cl_def_prop.size() ; i++)
		if (cl_def_prop[i].name == prop_name)
			return cl_def_prop[i];
	//	if not found, return  an empty DbDatum
	return Tango::DbDatum(prop_name);
}

//--------------------------------------------------------
/**
 *	Method      : AlarmManagerClass::get_class_property()
 *	Description : Read database to initialize class property data members.
 */
//--------------------------------------------------------
void AlarmManagerClass::get_class_property()
{
	/*----- PROTECTED REGION ID(AlarmManagerClass::get_class_property_before) ENABLED START -----*/
	
	//	Initialize class property data members
	
	/*----- PROTECTED REGION END -----*/	//	AlarmManagerClass::get_class_property_before
	//	Read class properties from database.
	cl_prop.push_back(Tango::DbDatum("MaxSearchSize"));
	cl_prop.push_back(Tango::DbDatum("DefaultArchiver"));
	cl_prop.push_back(Tango::DbDatum("DefaultStrategy"));
	
	//	Call database and extract values
	if (Tango::Util::instance()->_UseDb==true)
		get_db_class()->get_property(cl_prop);
	Tango::DbDatum	def_prop;
	int	i = -1;

	//	Try to extract MaxSearchSize value
	if (cl_prop[++i].is_empty()==false)	cl_prop[i]  >>  maxSearchSize;
	else
	{
		//	Check default value for MaxSearchSize
		def_prop = get_default_class_property(cl_prop[i].name);
		if (def_prop.is_empty()==false)
		{
			def_prop    >>  maxSearchSize;
			cl_prop[i]  <<  maxSearchSize;
		}
	}
	//	Try to extract DefaultArchiver value
	if (cl_prop[++i].is_empty()==false)	cl_prop[i]  >>  defaultArchiver;
	else
	{
		//	Check default value for DefaultArchiver
		def_prop = get_default_class_property(cl_prop[i].name);
		if (def_prop.is_empty()==false)
		{
			def_prop    >>  defaultArchiver;
			cl_prop[i]  <<  defaultArchiver;
		}
	}
	//	Try to extract DefaultStrategy value
	if (cl_prop[++i].is_empty()==false)	cl_prop[i]  >>  defaultStrategy;
	else
	{
		//	Check default value for DefaultStrategy
		def_prop = get_default_class_property(cl_prop[i].name);
		if (def_prop.is_empty()==false)
		{
			def_prop    >>  defaultStrategy;
			cl_prop[i]  <<  defaultStrategy;
		}
	}
	/*----- PROTECTED REGION ID(AlarmManagerClass::get_class_property_after) ENABLED START -----*/
	
	//	Check class property data members init
	
	/*----- PROTECTED REGION END -----*/	//	AlarmManagerClass::get_class_property_after

}

//--------------------------------------------------------
/**
 *	Method      : AlarmManagerClass::set_default_property()
 *	Description : Set default property (class and device) for wizard.
 *                For each property, add to wizard property name and description.
 *                If default value has been set, add it to wizard property and
 *                store it in a DbDatum.
 */
//--------------------------------------------------------
void AlarmManagerClass::set_default_property()
{
	string	prop_name;
	string	prop_desc;
	string	prop_def;
	vector<string>	vect_data;

	//	Set Default Class Properties
	prop_name = "MaxSearchSize";
	prop_desc = "Max size of search result";
	prop_def  = "1000";
	vect_data.clear();
	vect_data.push_back("1000");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		cl_def_prop.push_back(data);
		add_wiz_class_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_class_prop(prop_name, prop_desc);
	prop_name = "DefaultArchiver";
	prop_desc = "";
	prop_def  = "";
	vect_data.clear();
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		cl_def_prop.push_back(data);
		add_wiz_class_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_class_prop(prop_name, prop_desc);
	prop_name = "DefaultStrategy";
	prop_desc = "";
	prop_def  = "";
	vect_data.clear();
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		cl_def_prop.push_back(data);
		add_wiz_class_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_class_prop(prop_name, prop_desc);

	//	Set Default device Properties
	prop_name = "HandlerList";
	prop_desc = "List of alarm handlers to manage";
	prop_def  = "";
	vect_data.clear();
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "MaxSearchSize";
	prop_desc = "Max size of search result";
	prop_def  = "1000";
	vect_data.clear();
	vect_data.push_back("1000");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "PropertyList";
	prop_desc = "List of free properties where to find alarm handlers to manage\nEx:\nAlarmHandler/DeviceList1\nAlarmHandler/DeviceList2";
	prop_def  = "";
	vect_data.clear();
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "DefaultArchiver";
	prop_desc = "";
	prop_def  = "";
	vect_data.clear();
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "DefaultStrategy";
	prop_desc = "";
	prop_def  = "";
	vect_data.clear();
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
}

//--------------------------------------------------------
/**
 *	Method      : AlarmManagerClass::write_class_property()
 *	Description : Set class description fields as property in database
 */
//--------------------------------------------------------
void AlarmManagerClass::write_class_property()
{
	//	First time, check if database used
	if (Tango::Util::_UseDb == false)
		return;

	Tango::DbData	data;
	string	classname = get_name();
	string	header;
	string::size_type	start, end;

	//	Put title
	Tango::DbDatum	title("ProjectTitle");
	string	str_title("AlarmManager");
	title << str_title;
	data.push_back(title);

	//	Put Description
	Tango::DbDatum	description("Description");
	vector<string>	str_desc;
	str_desc.push_back("Manager for Alarm Handlers");
	description << str_desc;
	data.push_back(description);

	//  Put inheritance
	Tango::DbDatum	inher_datum("InheritedFrom");
	vector<string> inheritance;
	inheritance.push_back("TANGO_BASE_CLASS");
	inher_datum << inheritance;
	data.push_back(inher_datum);

	//	Call database and and values
	get_db_class()->put_property(data);
}

//===================================================================
//	Factory methods
//===================================================================

//--------------------------------------------------------
/**
 *	Method      : AlarmManagerClass::device_factory()
 *	Description : Create the device object(s)
 *                and store them in the device list
 */
//--------------------------------------------------------
void AlarmManagerClass::device_factory(const Tango::DevVarStringArray *devlist_ptr)
{
	/*----- PROTECTED REGION ID(AlarmManagerClass::device_factory_before) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	AlarmManagerClass::device_factory_before

	//	Create devices and add it into the device list
	for (unsigned long i=0 ; i<devlist_ptr->length() ; i++)
	{
		cout4 << "Device name : " << (*devlist_ptr)[i].in() << endl;
		device_list.push_back(new AlarmManager(this, (*devlist_ptr)[i]));
	}

	//	Manage dynamic attributes if any
	erase_dynamic_attributes(devlist_ptr, get_class_attr()->get_attr_list());

	//	Export devices to the outside world
	for (unsigned long i=1 ; i<=devlist_ptr->length() ; i++)
	{
		//	Add dynamic attributes if any
		AlarmManager *dev = static_cast<AlarmManager *>(device_list[device_list.size()-i]);
		dev->add_dynamic_attributes();

		//	Check before if database used.
		if ((Tango::Util::_UseDb == true) && (Tango::Util::_FileDb == false))
			export_device(dev);
		else
			export_device(dev, dev->get_name().c_str());
	}

	/*----- PROTECTED REGION ID(AlarmManagerClass::device_factory_after) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	AlarmManagerClass::device_factory_after
}
//--------------------------------------------------------
/**
 *	Method      : AlarmManagerClass::attribute_factory()
 *	Description : Create the attribute object(s)
 *                and store them in the attribute list
 */
//--------------------------------------------------------
void AlarmManagerClass::attribute_factory(vector<Tango::Attr *> &att_list)
{
	/*----- PROTECTED REGION ID(AlarmManagerClass::attribute_factory_before) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	AlarmManagerClass::attribute_factory_before
	//	Attribute : tag
	tagAttrib	*tag = new tagAttrib();
	Tango::UserDefaultAttrProp	tag_prop;
	tag_prop.set_description("Alarm tag");
	//	label	not set for tag
	//	unit	not set for tag
	//	standard_unit	not set for tag
	//	display_unit	not set for tag
	//	format	not set for tag
	//	max_value	not set for tag
	//	min_value	not set for tag
	//	max_alarm	not set for tag
	//	min_alarm	not set for tag
	//	max_warning	not set for tag
	//	min_warning	not set for tag
	//	delta_t	not set for tag
	//	delta_val	not set for tag
	
	tag->set_default_properties(tag_prop);
	//	Not Polled
	tag->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(tag);

	//	Attribute : formula
	formulaAttrib	*formula = new formulaAttrib();
	Tango::UserDefaultAttrProp	formula_prop;
	formula_prop.set_description("Alarm formula");
	//	label	not set for formula
	//	unit	not set for formula
	//	standard_unit	not set for formula
	//	display_unit	not set for formula
	//	format	not set for formula
	//	max_value	not set for formula
	//	min_value	not set for formula
	//	max_alarm	not set for formula
	//	min_alarm	not set for formula
	//	max_warning	not set for formula
	//	min_warning	not set for formula
	//	delta_t	not set for formula
	//	delta_val	not set for formula
	
	formula->set_default_properties(formula_prop);
	//	Not Polled
	formula->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(formula);

	//	Attribute : message
	messageAttrib	*message = new messageAttrib();
	Tango::UserDefaultAttrProp	message_prop;
	message_prop.set_description("Alarm message");
	//	label	not set for message
	//	unit	not set for message
	//	standard_unit	not set for message
	//	display_unit	not set for message
	//	format	not set for message
	//	max_value	not set for message
	//	min_value	not set for message
	//	max_alarm	not set for message
	//	min_alarm	not set for message
	//	max_warning	not set for message
	//	min_warning	not set for message
	//	delta_t	not set for message
	//	delta_val	not set for message
	
	message->set_default_properties(message_prop);
	//	Not Polled
	message->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(message);

	//	Attribute : priority
	priorityAttrib	*priority = new priorityAttrib();
	Tango::UserDefaultAttrProp	priority_prop;
	priority_prop.set_description("Alarm priority");
	//	label	not set for priority
	//	unit	not set for priority
	//	standard_unit	not set for priority
	//	display_unit	not set for priority
	//	format	not set for priority
	//	max_value	not set for priority
	//	min_value	not set for priority
	//	max_alarm	not set for priority
	//	min_alarm	not set for priority
	//	max_warning	not set for priority
	//	min_warning	not set for priority
	//	delta_t	not set for priority
	//	delta_val	not set for priority
	
	priority->set_default_properties(priority_prop);
	//	Not Polled
	priority->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(priority);

	//	Attribute : group
	groupAttrib	*group = new groupAttrib();
	Tango::UserDefaultAttrProp	group_prop;
	group_prop.set_description("Alarm group");
	//	label	not set for group
	//	unit	not set for group
	//	standard_unit	not set for group
	//	display_unit	not set for group
	//	format	not set for group
	//	max_value	not set for group
	//	min_value	not set for group
	//	max_alarm	not set for group
	//	min_alarm	not set for group
	//	max_warning	not set for group
	//	min_warning	not set for group
	//	delta_t	not set for group
	//	delta_val	not set for group
	
	group->set_default_properties(group_prop);
	//	Not Polled
	group->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(group);

	//	Attribute : shlvd_time
	shlvd_timeAttrib	*shlvd_time = new shlvd_timeAttrib();
	Tango::UserDefaultAttrProp	shlvd_time_prop;
	shlvd_time_prop.set_description("Alarm shelved time in minutes, -1 if disabled");
	//	label	not set for shlvd_time
	//	unit	not set for shlvd_time
	//	standard_unit	not set for shlvd_time
	//	display_unit	not set for shlvd_time
	//	format	not set for shlvd_time
	//	max_value	not set for shlvd_time
	//	min_value	not set for shlvd_time
	//	max_alarm	not set for shlvd_time
	//	min_alarm	not set for shlvd_time
	//	max_warning	not set for shlvd_time
	//	min_warning	not set for shlvd_time
	//	delta_t	not set for shlvd_time
	//	delta_val	not set for shlvd_time
	
	shlvd_time->set_default_properties(shlvd_time_prop);
	//	Not Polled
	shlvd_time->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(shlvd_time);

	//	Attribute : on_delay
	on_delayAttrib	*on_delay = new on_delayAttrib();
	Tango::UserDefaultAttrProp	on_delay_prop;
	on_delay_prop.set_description("Alarm delay time in seconds before becoming active");
	//	label	not set for on_delay
	//	unit	not set for on_delay
	//	standard_unit	not set for on_delay
	//	display_unit	not set for on_delay
	//	format	not set for on_delay
	//	max_value	not set for on_delay
	//	min_value	not set for on_delay
	//	max_alarm	not set for on_delay
	//	min_alarm	not set for on_delay
	//	max_warning	not set for on_delay
	//	min_warning	not set for on_delay
	//	delta_t	not set for on_delay
	//	delta_val	not set for on_delay
	
	on_delay->set_default_properties(on_delay_prop);
	//	Not Polled
	on_delay->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(on_delay);

	//	Attribute : off_delay
	off_delayAttrib	*off_delay = new off_delayAttrib();
	Tango::UserDefaultAttrProp	off_delay_prop;
	off_delay_prop.set_description("Alarm delay time in seconds before becoming non active");
	//	label	not set for off_delay
	//	unit	not set for off_delay
	//	standard_unit	not set for off_delay
	//	display_unit	not set for off_delay
	//	format	not set for off_delay
	//	max_value	not set for off_delay
	//	min_value	not set for off_delay
	//	max_alarm	not set for off_delay
	//	min_alarm	not set for off_delay
	//	max_warning	not set for off_delay
	//	min_warning	not set for off_delay
	//	delta_t	not set for off_delay
	//	delta_val	not set for off_delay
	
	off_delay->set_default_properties(off_delay_prop);
	//	Not Polled
	off_delay->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(off_delay);

	//	Attribute : on_command
	on_commandAttrib	*on_command = new on_commandAttrib();
	Tango::UserDefaultAttrProp	on_command_prop;
	on_command_prop.set_description("Alarm command executed when becoming active");
	//	label	not set for on_command
	//	unit	not set for on_command
	//	standard_unit	not set for on_command
	//	display_unit	not set for on_command
	//	format	not set for on_command
	//	max_value	not set for on_command
	//	min_value	not set for on_command
	//	max_alarm	not set for on_command
	//	min_alarm	not set for on_command
	//	max_warning	not set for on_command
	//	min_warning	not set for on_command
	//	delta_t	not set for on_command
	//	delta_val	not set for on_command
	
	on_command->set_default_properties(on_command_prop);
	//	Not Polled
	on_command->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(on_command);

	//	Attribute : off_command
	off_commandAttrib	*off_command = new off_commandAttrib();
	Tango::UserDefaultAttrProp	off_command_prop;
	off_command_prop.set_description("Alarm command executed when becoming non active");
	//	label	not set for off_command
	//	unit	not set for off_command
	//	standard_unit	not set for off_command
	//	display_unit	not set for off_command
	//	format	not set for off_command
	//	max_value	not set for off_command
	//	min_value	not set for off_command
	//	max_alarm	not set for off_command
	//	min_alarm	not set for off_command
	//	max_warning	not set for off_command
	//	min_warning	not set for off_command
	//	delta_t	not set for off_command
	//	delta_val	not set for off_command
	
	off_command->set_default_properties(off_command_prop);
	//	Not Polled
	off_command->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(off_command);

	//	Attribute : enabled
	enabledAttrib	*enabled = new enabledAttrib();
	Tango::UserDefaultAttrProp	enabled_prop;
	enabled_prop.set_description("Alarm enabled");
	//	label	not set for enabled
	//	unit	not set for enabled
	//	standard_unit	not set for enabled
	//	display_unit	not set for enabled
	//	format	not set for enabled
	//	max_value	not set for enabled
	//	min_value	not set for enabled
	//	max_alarm	not set for enabled
	//	min_alarm	not set for enabled
	//	max_warning	not set for enabled
	//	min_warning	not set for enabled
	//	delta_t	not set for enabled
	//	delta_val	not set for enabled
	
	enabled->set_default_properties(enabled_prop);
	//	Not Polled
	enabled->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(enabled);

	//	Attribute : handler
	handlerAttrib	*handler = new handlerAttrib();
	Tango::UserDefaultAttrProp	handler_prop;
	handler_prop.set_description("Alarm Handler device");
	//	label	not set for handler
	//	unit	not set for handler
	//	standard_unit	not set for handler
	//	display_unit	not set for handler
	//	format	not set for handler
	//	max_value	not set for handler
	//	min_value	not set for handler
	//	max_alarm	not set for handler
	//	min_alarm	not set for handler
	//	max_warning	not set for handler
	//	min_warning	not set for handler
	//	delta_t	not set for handler
	//	delta_val	not set for handler
	
	handler->set_default_properties(handler_prop);
	//	Not Polled
	handler->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(handler);

	//	Attribute : url
	urlAttrib	*url = new urlAttrib();
	Tango::UserDefaultAttrProp	url_prop;
	url_prop.set_description("Alarm url");
	//	label	not set for url
	//	unit	not set for url
	//	standard_unit	not set for url
	//	display_unit	not set for url
	//	format	not set for url
	//	max_value	not set for url
	//	min_value	not set for url
	//	max_alarm	not set for url
	//	min_alarm	not set for url
	//	max_warning	not set for url
	//	min_warning	not set for url
	//	delta_t	not set for url
	//	delta_val	not set for url
	
	url->set_default_properties(url_prop);
	//	Not Polled
	url->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(url);

	//	Attribute : default_archiver
	default_archiverAttrib	*default_archiver = new default_archiverAttrib();
	Tango::UserDefaultAttrProp	default_archiver_prop;
	default_archiver_prop.set_description("Use DefaultArchiver device property");
	//	label	not set for default_archiver
	//	unit	not set for default_archiver
	//	standard_unit	not set for default_archiver
	//	display_unit	not set for default_archiver
	//	format	not set for default_archiver
	//	max_value	not set for default_archiver
	//	min_value	not set for default_archiver
	//	max_alarm	not set for default_archiver
	//	min_alarm	not set for default_archiver
	//	max_warning	not set for default_archiver
	//	min_warning	not set for default_archiver
	//	delta_t	not set for default_archiver
	//	delta_val	not set for default_archiver
	
	default_archiver->set_default_properties(default_archiver_prop);
	//	Not Polled
	default_archiver->set_disp_level(Tango::OPERATOR);
	default_archiver->set_memorized();
	default_archiver->set_memorized_init(true);
	att_list.push_back(default_archiver);

	//	Attribute : archiver
	archiverAttrib	*archiver = new archiverAttrib();
	Tango::UserDefaultAttrProp	archiver_prop;
	//	description	not set for archiver
	//	label	not set for archiver
	//	unit	not set for archiver
	//	standard_unit	not set for archiver
	//	display_unit	not set for archiver
	//	format	not set for archiver
	//	max_value	not set for archiver
	//	min_value	not set for archiver
	//	max_alarm	not set for archiver
	//	min_alarm	not set for archiver
	//	max_warning	not set for archiver
	//	min_warning	not set for archiver
	//	delta_t	not set for archiver
	//	delta_val	not set for archiver
	
	archiver->set_default_properties(archiver_prop);
	//	Not Polled
	archiver->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(archiver);

	//	Attribute : strategy
	strategyAttrib	*strategy = new strategyAttrib();
	Tango::UserDefaultAttrProp	strategy_prop;
	//	description	not set for strategy
	//	label	not set for strategy
	//	unit	not set for strategy
	//	standard_unit	not set for strategy
	//	display_unit	not set for strategy
	//	format	not set for strategy
	//	max_value	not set for strategy
	//	min_value	not set for strategy
	//	max_alarm	not set for strategy
	//	min_alarm	not set for strategy
	//	max_warning	not set for strategy
	//	min_warning	not set for strategy
	//	delta_t	not set for strategy
	//	delta_val	not set for strategy
	
	strategy->set_default_properties(strategy_prop);
	//	Not Polled
	strategy->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(strategy);

	//	Attribute : alarmList
	alarmListAttrib	*alarmlist = new alarmListAttrib();
	Tango::UserDefaultAttrProp	alarmlist_prop;
	alarmlist_prop.set_description("List of all alarms");
	//	label	not set for alarmList
	//	unit	not set for alarmList
	//	standard_unit	not set for alarmList
	//	display_unit	not set for alarmList
	//	format	not set for alarmList
	//	max_value	not set for alarmList
	//	min_value	not set for alarmList
	//	max_alarm	not set for alarmList
	//	min_alarm	not set for alarmList
	//	max_warning	not set for alarmList
	//	min_warning	not set for alarmList
	//	delta_t	not set for alarmList
	//	delta_val	not set for alarmList
	
	alarmlist->set_default_properties(alarmlist_prop);
	//	Not Polled
	alarmlist->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(alarmlist);

	//	Attribute : alarmFrequency
	alarmFrequencyAttrib	*alarmfrequency = new alarmFrequencyAttrib();
	Tango::UserDefaultAttrProp	alarmfrequency_prop;
	alarmfrequency_prop.set_description("List of frequency of evaluation of all alarms");
	//	label	not set for alarmFrequency
	//	unit	not set for alarmFrequency
	//	standard_unit	not set for alarmFrequency
	//	display_unit	not set for alarmFrequency
	//	format	not set for alarmFrequency
	//	max_value	not set for alarmFrequency
	//	min_value	not set for alarmFrequency
	//	max_alarm	not set for alarmFrequency
	//	min_alarm	not set for alarmFrequency
	//	max_warning	not set for alarmFrequency
	//	min_warning	not set for alarmFrequency
	//	delta_t	not set for alarmFrequency
	//	delta_val	not set for alarmFrequency
	
	alarmfrequency->set_default_properties(alarmfrequency_prop);
	//	Not Polled
	alarmfrequency->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(alarmfrequency);

	//	Attribute : handlerStatus
	handlerStatusAttrib	*handlerstatus = new handlerStatusAttrib();
	Tango::UserDefaultAttrProp	handlerstatus_prop;
	handlerstatus_prop.set_description("List of:\nHandler Device Name = Tango State");
	//	label	not set for handlerStatus
	//	unit	not set for handlerStatus
	//	standard_unit	not set for handlerStatus
	//	display_unit	not set for handlerStatus
	//	format	not set for handlerStatus
	//	max_value	not set for handlerStatus
	//	min_value	not set for handlerStatus
	//	max_alarm	not set for handlerStatus
	//	min_alarm	not set for handlerStatus
	//	max_warning	not set for handlerStatus
	//	min_warning	not set for handlerStatus
	//	delta_t	not set for handlerStatus
	//	delta_val	not set for handlerStatus
	
	handlerstatus->set_default_properties(handlerstatus_prop);
	//	Not Polled
	handlerstatus->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(handlerstatus);


	//	Create a list of static attributes
	create_static_attribute_list(get_class_attr()->get_attr_list());
	/*----- PROTECTED REGION ID(AlarmManagerClass::attribute_factory_after) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	AlarmManagerClass::attribute_factory_after
}
//--------------------------------------------------------
/**
 *	Method      : AlarmManagerClass::pipe_factory()
 *	Description : Create the pipe object(s)
 *                and store them in the pipe list
 */
//--------------------------------------------------------
void AlarmManagerClass::pipe_factory()
{
	/*----- PROTECTED REGION ID(AlarmManagerClass::pipe_factory_before) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	AlarmManagerClass::pipe_factory_before
	/*----- PROTECTED REGION ID(AlarmManagerClass::pipe_factory_after) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	AlarmManagerClass::pipe_factory_after
}
//--------------------------------------------------------
/**
 *	Method      : AlarmManagerClass::command_factory()
 *	Description : Create the command object(s)
 *                and store them in the command list
 */
//--------------------------------------------------------
void AlarmManagerClass::command_factory()
{
	/*----- PROTECTED REGION ID(AlarmManagerClass::command_factory_before) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	AlarmManagerClass::command_factory_before


	//	Command Load
	LoadClass	*pLoadCmd =
		new LoadClass("Load",
			Tango::DEV_VOID, Tango::DEV_VOID,
			"",
			"",
			Tango::OPERATOR);
	command_list.push_back(pLoadCmd);

	//	Command Remove
	RemoveClass	*pRemoveCmd =
		new RemoveClass("Remove",
			Tango::DEV_STRING, Tango::DEV_VOID,
			"tagname",
			"",
			Tango::OPERATOR);
	command_list.push_back(pRemoveCmd);

	//	Command Modify
	ModifyClass	*pModifyCmd =
		new ModifyClass("Modify",
			Tango::DEV_VOID, Tango::DEV_VOID,
			"",
			"",
			Tango::OPERATOR);
	command_list.push_back(pModifyCmd);

	//	Command GetAlarmInfo
	GetAlarmInfoClass	*pGetAlarmInfoCmd =
		new GetAlarmInfoClass("GetAlarmInfo",
			Tango::DEVVAR_STRINGARRAY, Tango::DEVVAR_STRINGARRAY,
			"Alarm name followed optionally by wanted key names",
			"Complete attribute info as an array of key=value",
			Tango::OPERATOR);
	command_list.push_back(pGetAlarmInfoCmd);

	//	Command SearchAlarmName
	SearchAlarmNameClass	*pSearchAlarmNameCmd =
		new SearchAlarmNameClass("SearchAlarmName",
			Tango::DEV_STRING, Tango::DEVVAR_STRINGARRAY,
			"String containing a filter for output, if empty or * return all alarms",
			"Configured alarm names",
			Tango::OPERATOR);
	command_list.push_back(pSearchAlarmNameCmd);

	//	Command ReLoadAll
	ReLoadAllClass	*pReLoadAllCmd =
		new ReLoadAllClass("ReLoadAll",
			Tango::DEV_VOID, Tango::DEV_VOID,
			"",
			"",
			Tango::OPERATOR);
	command_list.push_back(pReLoadAllCmd);

	//	Command ResetStatistics
	ResetStatisticsClass	*pResetStatisticsCmd =
		new ResetStatisticsClass("ResetStatistics",
			Tango::DEV_VOID, Tango::DEV_VOID,
			"",
			"",
			Tango::OPERATOR);
	command_list.push_back(pResetStatisticsCmd);

	//	Command LoadConf
	LoadConfClass	*pLoadConfCmd =
		new LoadConfClass("LoadConf",
			Tango::DEV_STRING, Tango::DEV_VOID,
			"Alarm string configuration:\ntag=;formula=;on_delay=;off_delay=;priority=;shlvd_time=;group=;message=;on_command=;off_command=;enabled=;handler=",
			"",
			Tango::OPERATOR);
	command_list.push_back(pLoadConfCmd);

	//	Command SearchAlarmConf
	SearchAlarmConfClass	*pSearchAlarmConfCmd =
		new SearchAlarmConfClass("SearchAlarmConf",
			Tango::DEV_STRING, Tango::DEVVAR_STRINGARRAY,
			"String containing a filter for output, if empty or * return all alarms",
			"Alarm string configuration:\ntag=;formula=;on_delay=;off_delay=;priority=;shlvd_time=;group=;message=;on_command=;off_command=;enabled=;handler=",
			Tango::OPERATOR);
	command_list.push_back(pSearchAlarmConfCmd);

	//	Command ModifyConf
	ModifyConfClass	*pModifyConfCmd =
		new ModifyConfClass("ModifyConf",
			Tango::DEV_STRING, Tango::DEV_VOID,
			"Alarm string configuration:\ntag=;formula=;on_delay=;off_delay=;priority=;shlvd_time=;group=;message=;on_command=;off_command=;enabled=;handler=",
			"",
			Tango::OPERATOR);
	command_list.push_back(pModifyConfCmd);

	//	Command AddArchiver
	AddArchiverClass	*pAddArchiverCmd =
		new AddArchiverClass("AddArchiver",
			Tango::DEVVAR_STRINGARRAY, Tango::DEV_VOID,
			"AlarmName, Archiver, Strategy",
			"",
			Tango::OPERATOR);
	command_list.push_back(pAddArchiverCmd);

	//	Command Rename
	RenameClass	*pRenameCmd =
		new RenameClass("Rename",
			Tango::DEVVAR_STRINGARRAY, Tango::DEV_VOID,
			"Old name (fqdn or just attribute)\nNew name (fwdn or just attribute)",
			"",
			Tango::OPERATOR);
	command_list.push_back(pRenameCmd);

	/*----- PROTECTED REGION ID(AlarmManagerClass::command_factory_after) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	AlarmManagerClass::command_factory_after
}

//===================================================================
//	Dynamic attributes related methods
//===================================================================

//--------------------------------------------------------
/**
 * method : 		AlarmManagerClass::create_static_attribute_list
 * description : 	Create the a list of static attributes
 *
 * @param	att_list	the ceated attribute list
 */
//--------------------------------------------------------
void AlarmManagerClass::create_static_attribute_list(vector<Tango::Attr *> &att_list)
{
	for (unsigned long i=0 ; i<att_list.size() ; i++)
	{
		string att_name(att_list[i]->get_name());
		transform(att_name.begin(), att_name.end(), att_name.begin(), ::tolower);
		defaultAttList.push_back(att_name);
	}

	cout2 << defaultAttList.size() << " attributes in default list" << endl;

	/*----- PROTECTED REGION ID(AlarmManagerClass::create_static_att_list) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	AlarmManagerClass::create_static_att_list
}


//--------------------------------------------------------
/**
 * method : 		AlarmManagerClass::erase_dynamic_attributes
 * description : 	delete the dynamic attributes if any.
 *
 * @param	devlist_ptr	the device list pointer
 * @param	list of all attributes
 */
//--------------------------------------------------------
void AlarmManagerClass::erase_dynamic_attributes(const Tango::DevVarStringArray *devlist_ptr, vector<Tango::Attr *> &att_list)
{
	Tango::Util *tg = Tango::Util::instance();

	for (unsigned long i=0 ; i<devlist_ptr->length() ; i++)
	{
		Tango::DeviceImpl *dev_impl = tg->get_device_by_name(((string)(*devlist_ptr)[i]).c_str());
		AlarmManager *dev = static_cast<AlarmManager *> (dev_impl);

		vector<Tango::Attribute *> &dev_att_list = dev->get_device_attr()->get_attribute_list();
		vector<Tango::Attribute *>::iterator ite_att;
		for (ite_att=dev_att_list.begin() ; ite_att != dev_att_list.end() ; ++ite_att)
		{
			string att_name((*ite_att)->get_name_lower());
			if ((att_name == "state") || (att_name == "status"))
				continue;
			vector<string>::iterator ite_str = find(defaultAttList.begin(), defaultAttList.end(), att_name);
			if (ite_str == defaultAttList.end())
			{
				cout2 << att_name << " is a UNWANTED dynamic attribute for device " << (*devlist_ptr)[i] << endl;
				Tango::Attribute &att = dev->get_device_attr()->get_attr_by_name(att_name.c_str());
				dev->remove_attribute(att_list[att.get_attr_idx()], true, false);
				--ite_att;
			}
		}
	}
	/*----- PROTECTED REGION ID(AlarmManagerClass::erase_dynamic_attributes) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	AlarmManagerClass::erase_dynamic_attributes
}

//--------------------------------------------------------
/**
 *	Method      : AlarmManagerClass::get_attr_object_by_name()
 *	Description : returns Tango::Attr * object found by name
 */
//--------------------------------------------------------
Tango::Attr *AlarmManagerClass::get_attr_object_by_name(vector<Tango::Attr *> &att_list, string attname)
{
	vector<Tango::Attr *>::iterator it;
	for (it=att_list.begin() ; it<att_list.end() ; ++it)
		if ((*it)->get_name()==attname)
			return (*it);
	//	Attr does not exist
	return NULL;
}


/*----- PROTECTED REGION ID(AlarmManagerClass::Additional Methods) ENABLED START -----*/

/*----- PROTECTED REGION END -----*/	//	AlarmManagerClass::Additional Methods
} //	namespace
