/*----- PROTECTED REGION ID(AlarmManager.h) ENABLED START -----*/
//=============================================================================
//
// file :        AlarmManager.h
//
// description : Include file for the AlarmManager class
//
// project :     AlarmManager
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
//
// Elettra-Sincrotrone Trieste S.C.p.A. di interesse nazionale
// Strada Statale 14 - km 163,5 in AREA Science Park
// 34149 Basovizza, Trieste ITALY
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef AlarmManager_H
#define AlarmManager_H

#include <tango.h>


/*----- PROTECTED REGION END -----*/	//	AlarmManager.h

/**
 *  AlarmManager class description:
 *    Manager for Alarm Handlers
 */

namespace AlarmManager_ns
{
/*----- PROTECTED REGION ID(AlarmManager::Additional Class Declarations) ENABLED START -----*/

//	Additional Class Declarations
typedef struct {
	vector<string> alm_list;
	vector<double> freq_list;
	std::unique_ptr<Tango::DeviceProxy> dp;
} handler_t;

bool compare_tango_names(string str1, string str2);

struct tango_names_compare {
  bool operator() (string str1, string str2) const
  {return compare_tango_names(str1,str2);}
};

typedef map<string,handler_t,tango_names_compare> handler_map_t;

/*----- PROTECTED REGION END -----*/	//	AlarmManager::Additional Class Declarations

class AlarmManager : public TANGO_BASE_CLASS
{

/*----- PROTECTED REGION ID(AlarmManager::Data Members) ENABLED START -----*/

//	Add your own data members
	handler_map_t handlerMap;
	vector<string> handler_list_fix;
//	static map<string, string> domain_map;
	timespec last_stat;
	vector<string> attribute_search_list_str;

/*----- PROTECTED REGION END -----*/	//	AlarmManager::Data Members

//	Device property data members
public:
	//	HandlerList:	List of alarm handlers to manage
	vector<string>	handlerList;
	//	MaxSearchSize:	Max size of search result
	Tango::DevLong	maxSearchSize;
	//	PropertyList:	List of free properties where to find alarm handlers to manage
	//  Ex:
	//  AlarmHandler/DeviceList1
	//  AlarmHandler/DeviceList2
	vector<string>	propertyList;

	bool	mandatoryNotDefined;

//	Attribute data members
public:
	Tango::DevString	*attr_tag_read;
	Tango::DevString	*attr_formula_read;
	Tango::DevString	*attr_message_read;
	Tango::DevString	*attr_priority_read;
	Tango::DevString	*attr_group_read;
	Tango::DevLong	*attr_shlvd_time_read;
	Tango::DevLong	*attr_on_delay_read;
	Tango::DevLong	*attr_off_delay_read;
	Tango::DevString	*attr_on_command_read;
	Tango::DevString	*attr_off_command_read;
	Tango::DevBoolean	*attr_enabled_read;
	Tango::DevString	*attr_handler_read;
	Tango::DevString	*attr_url_read;
	Tango::DevString	*attr_alarmList_read;
	Tango::DevDouble	*attr_alarmFrequency_read;
	Tango::DevString	*attr_handlerStatus_read;

//	Constructors and destructors
public:
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	AlarmManager(Tango::DeviceClass *cl,string &s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	AlarmManager(Tango::DeviceClass *cl,const char *s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device name
	 *	@param d	Device description.
	 */
	AlarmManager(Tango::DeviceClass *cl,const char *s,const char *d);
	/**
	 * The device object destructor.
	 */
	~AlarmManager() {delete_device();};


//	Miscellaneous methods
public:
	/*
	 *	will be called at device destruction or at init command.
	 */
	void delete_device();
	/*
	 *	Initialize the device
	 */
	virtual void init_device();
	/*
	 *	Read the device properties from database
	 */
	void get_device_property();
	/*
	 *	Always executed method before execution command method.
	 */
	virtual void always_executed_hook();

	/*
	 *	Check if mandatory property has been set
	 */
	 void check_mandatory_property(Tango::DbDatum &class_prop, Tango::DbDatum &dev_prop);

//	Attribute methods
public:
	//--------------------------------------------------------
	/*
	 *	Method      : AlarmManager::read_attr_hardware()
	 *	Description : Hardware acquisition for attributes.
	 */
	//--------------------------------------------------------
	virtual void read_attr_hardware(vector<long> &attr_list);
	//--------------------------------------------------------
	/*
	 *	Method      : AlarmManager::write_attr_hardware()
	 *	Description : Hardware writing for attributes.
	 */
	//--------------------------------------------------------
	virtual void write_attr_hardware(vector<long> &attr_list);

/**
 *	Attribute tag related methods
 *	Description: Alarm tag
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
	virtual void read_tag(Tango::Attribute &attr);
	virtual void write_tag(Tango::WAttribute &attr);
	virtual bool is_tag_allowed(Tango::AttReqType type);
/**
 *	Attribute formula related methods
 *	Description: Alarm formula
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
	virtual void read_formula(Tango::Attribute &attr);
	virtual void write_formula(Tango::WAttribute &attr);
	virtual bool is_formula_allowed(Tango::AttReqType type);
/**
 *	Attribute message related methods
 *	Description: Alarm message
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
	virtual void read_message(Tango::Attribute &attr);
	virtual void write_message(Tango::WAttribute &attr);
	virtual bool is_message_allowed(Tango::AttReqType type);
/**
 *	Attribute priority related methods
 *	Description: Alarm priority
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
	virtual void read_priority(Tango::Attribute &attr);
	virtual void write_priority(Tango::WAttribute &attr);
	virtual bool is_priority_allowed(Tango::AttReqType type);
/**
 *	Attribute group related methods
 *	Description: Alarm group
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
	virtual void read_group(Tango::Attribute &attr);
	virtual void write_group(Tango::WAttribute &attr);
	virtual bool is_group_allowed(Tango::AttReqType type);
/**
 *	Attribute shlvd_time related methods
 *	Description: Alarm shelved time in minutes, -1 if disabled
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
	virtual void read_shlvd_time(Tango::Attribute &attr);
	virtual void write_shlvd_time(Tango::WAttribute &attr);
	virtual bool is_shlvd_time_allowed(Tango::AttReqType type);
/**
 *	Attribute on_delay related methods
 *	Description: Alarm delay time in seconds before becoming active
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
	virtual void read_on_delay(Tango::Attribute &attr);
	virtual void write_on_delay(Tango::WAttribute &attr);
	virtual bool is_on_delay_allowed(Tango::AttReqType type);
/**
 *	Attribute off_delay related methods
 *	Description: Alarm delay time in seconds before becoming non active
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
	virtual void read_off_delay(Tango::Attribute &attr);
	virtual void write_off_delay(Tango::WAttribute &attr);
	virtual bool is_off_delay_allowed(Tango::AttReqType type);
/**
 *	Attribute on_command related methods
 *	Description: Alarm command executed when becoming active
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
	virtual void read_on_command(Tango::Attribute &attr);
	virtual void write_on_command(Tango::WAttribute &attr);
	virtual bool is_on_command_allowed(Tango::AttReqType type);
/**
 *	Attribute off_command related methods
 *	Description: Alarm command executed when becoming non active
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
	virtual void read_off_command(Tango::Attribute &attr);
	virtual void write_off_command(Tango::WAttribute &attr);
	virtual bool is_off_command_allowed(Tango::AttReqType type);
/**
 *	Attribute enabled related methods
 *	Description: Alarm enabled
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
	virtual void read_enabled(Tango::Attribute &attr);
	virtual void write_enabled(Tango::WAttribute &attr);
	virtual bool is_enabled_allowed(Tango::AttReqType type);
/**
 *	Attribute handler related methods
 *	Description: Alarm Handler device
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
	virtual void read_handler(Tango::Attribute &attr);
	virtual void write_handler(Tango::WAttribute &attr);
	virtual bool is_handler_allowed(Tango::AttReqType type);
/**
 *	Attribute url related methods
 *	Description: Alarm url
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
	virtual void read_url(Tango::Attribute &attr);
	virtual void write_url(Tango::WAttribute &attr);
	virtual bool is_url_allowed(Tango::AttReqType type);
/**
 *	Attribute alarmList related methods
 *	Description: List of all alarms
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Spectrum max = 10000
 */
	virtual void read_alarmList(Tango::Attribute &attr);
	virtual bool is_alarmList_allowed(Tango::AttReqType type);
/**
 *	Attribute alarmFrequency related methods
 *	Description: List of frequency of evaluation of all alarms
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum max = 10000
 */
	virtual void read_alarmFrequency(Tango::Attribute &attr);
	virtual bool is_alarmFrequency_allowed(Tango::AttReqType type);
/**
 *	Attribute handlerStatus related methods
 *	Description: List of:
 *               Handler Device Name = Tango State
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Spectrum max = 1000
 */
	virtual void read_handlerStatus(Tango::Attribute &attr);
	virtual bool is_handlerStatus_allowed(Tango::AttReqType type);


	//--------------------------------------------------------
	/**
	 *	Method      : AlarmManager::add_dynamic_attributes()
	 *	Description : Add dynamic attributes if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_attributes();




//	Command related methods
public:
	/**
	 *	Command Load related method
	 *	Description: Load alarm taking configuration from attributes
	 *
	 */
	virtual void load();
	virtual bool is_Load_allowed(const CORBA::Any &any);
	/**
	 *	Command Remove related method
	 *	Description: 
	 *
	 *	@param argin tagname
	 */
	virtual void remove(Tango::DevString argin);
	virtual bool is_Remove_allowed(const CORBA::Any &any);
	/**
	 *	Command Modify related method
	 *	Description: Modify alarm taking configuration from attributes
	 *
	 */
	virtual void modify();
	virtual bool is_Modify_allowed(const CORBA::Any &any);
	/**
	 *	Command GetAlarmInfo related method
	 *	Description: Returns the complete attribute info as an array of key=value
	 *
	 *	@param argin Alarm name followed optionally by wanted key names
	 *	@returns Complete attribute info as an array of key=value
	 */
	virtual Tango::DevVarStringArray *get_alarm_info(const Tango::DevVarStringArray *argin);
	virtual bool is_GetAlarmInfo_allowed(const CORBA::Any &any);
	/**
	 *	Command SearchAlarm related method
	 *	Description: Return list of configured alarm names matching the filter string
	 *
	 *	@param argin String containing a filter for output, if empty or * return all alarms
	 *	@returns Configured alarm names
	 */
	virtual Tango::DevVarStringArray *search_alarm(Tango::DevString argin);
	virtual bool is_SearchAlarm_allowed(const CORBA::Any &any);
	/**
	 *	Command ReLoadAll related method
	 *	Description: Reload all alarms from attribute properties
	 *
	 */
	virtual void re_load_all();
	virtual bool is_ReLoadAll_allowed(const CORBA::Any &any);
	/**
	 *	Command ResetStatistics related method
	 *	Description: Reset statistics
	 *
	 */
	virtual void reset_statistics();
	virtual bool is_ResetStatistics_allowed(const CORBA::Any &any);
	/**
	 *	Command LoadConf related method
	 *	Description: Load alarm taking configuration from input string
	 *
	 *	@param argin Alarm string configuration:
	 *               tag=;formula=;on_delay=;off_delay=;priority=;shlvd_time=;group=;message=;on_command=;off_command=;enabled=;handler=
	 */
	virtual void load_conf(Tango::DevString argin);
	virtual bool is_LoadConf_allowed(const CORBA::Any &any);
	/**
	 *	Command SearchAlarmConf related method
	 *	Description: Return list of configured alarm strings matching the filter string
	 *
	 *	@param argin String containing a filter for output, if empty or * return all alarms
	 *	@returns Alarm string configuration:
	 *           tag=;formula=;on_delay=;off_delay=;priority=;shlvd_time=;group=;message=;on_command=;off_command=;enabled=;handler=
	 */
	virtual Tango::DevVarStringArray *search_alarm_conf(Tango::DevString argin);
	virtual bool is_SearchAlarmConf_allowed(const CORBA::Any &any);
	/**
	 *	Command ModifyConf related method
	 *	Description: Modify alarm taking configuration from input string
	 *
	 *	@param argin Alarm string configuration:
	 *               tag=;formula=;on_delay=;off_delay=;priority=;shlvd_time=;group=;message=;on_command=;off_command=;enabled=;handler=
	 */
	virtual void modify_conf(Tango::DevString argin);
	virtual bool is_ModifyConf_allowed(const CORBA::Any &any);


	//--------------------------------------------------------
	/**
	 *	Method      : AlarmManager::add_dynamic_commands()
	 *	Description : Add dynamic commands if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_commands();

/*----- PROTECTED REGION ID(AlarmManager::Additional Method prototypes) ENABLED START -----*/

//	Additional Method prototypes
	string find_handler(string &tagname);
	void parse_conf(string conf, string &tagname, string &hndlrnamenew, string &formula,
	string &message, string &group, string &priority, string &on_command, string &off_command,
	string &on_delay, string &off_delay, string &shlvd_time, string &enabled, string &url);

/*----- PROTECTED REGION END -----*/	//	AlarmManager::Additional Method prototypes
};

/*----- PROTECTED REGION ID(AlarmManager::Additional Classes Definitions) ENABLED START -----*/

//	Additional Classes Definitions

/*----- PROTECTED REGION END -----*/	//	AlarmManager::Additional Classes Definitions

}	//	End of namespace

#endif   //	AlarmManager_H
