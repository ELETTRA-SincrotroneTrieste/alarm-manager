/*----- PROTECTED REGION ID(AlarmManagerClass.h) ENABLED START -----*/
//=============================================================================
//
// file :        AlarmManagerClass.h
//
// description : Include for the AlarmManager root class.
//               This class is the singleton class for
//                the AlarmManager device class.
//               It contains all properties and methods which the 
//               AlarmManager requires only once e.g. the commands.
//
// project :     AlarmManager
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
//
// Elettra-Sincrotrone Trieste S.C.p.A. di interesse nazionale
// Strada Statale 14 - km 163,5 in AREA Science Park
// 34149 Basovizza, Trieste ITALY
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef AlarmManagerClass_H
#define AlarmManagerClass_H

#include <tango.h>
#include <AlarmManager.h>


/*----- PROTECTED REGION END -----*/	//	AlarmManagerClass.h


namespace AlarmManager_ns
{
/*----- PROTECTED REGION ID(AlarmManagerClass::classes for dynamic creation) ENABLED START -----*/


/*----- PROTECTED REGION END -----*/	//	AlarmManagerClass::classes for dynamic creation

//=========================================
//	Define classes for attributes
//=========================================
//	Attribute tag class definition
class tagAttrib: public Tango::Attr
{
public:
	tagAttrib():Attr("tag",
			Tango::DEV_STRING, Tango::READ_WRITE) {};
	~tagAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<AlarmManager *>(dev))->read_tag(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<AlarmManager *>(dev))->write_tag(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<AlarmManager *>(dev))->is_tag_allowed(ty);}
};

//	Attribute formula class definition
class formulaAttrib: public Tango::Attr
{
public:
	formulaAttrib():Attr("formula",
			Tango::DEV_STRING, Tango::READ_WRITE) {};
	~formulaAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<AlarmManager *>(dev))->read_formula(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<AlarmManager *>(dev))->write_formula(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<AlarmManager *>(dev))->is_formula_allowed(ty);}
};

//	Attribute message class definition
class messageAttrib: public Tango::Attr
{
public:
	messageAttrib():Attr("message",
			Tango::DEV_STRING, Tango::READ_WRITE) {};
	~messageAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<AlarmManager *>(dev))->read_message(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<AlarmManager *>(dev))->write_message(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<AlarmManager *>(dev))->is_message_allowed(ty);}
};

//	Attribute priority class definition
class priorityAttrib: public Tango::Attr
{
public:
	priorityAttrib():Attr("priority",
			Tango::DEV_STRING, Tango::READ_WRITE) {};
	~priorityAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<AlarmManager *>(dev))->read_priority(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<AlarmManager *>(dev))->write_priority(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<AlarmManager *>(dev))->is_priority_allowed(ty);}
};

//	Attribute group class definition
class groupAttrib: public Tango::Attr
{
public:
	groupAttrib():Attr("group",
			Tango::DEV_STRING, Tango::READ_WRITE) {};
	~groupAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<AlarmManager *>(dev))->read_group(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<AlarmManager *>(dev))->write_group(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<AlarmManager *>(dev))->is_group_allowed(ty);}
};

//	Attribute shlvd_time class definition
class shlvd_timeAttrib: public Tango::Attr
{
public:
	shlvd_timeAttrib():Attr("shlvd_time",
			Tango::DEV_LONG, Tango::READ_WRITE) {};
	~shlvd_timeAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<AlarmManager *>(dev))->read_shlvd_time(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<AlarmManager *>(dev))->write_shlvd_time(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<AlarmManager *>(dev))->is_shlvd_time_allowed(ty);}
};

//	Attribute on_delay class definition
class on_delayAttrib: public Tango::Attr
{
public:
	on_delayAttrib():Attr("on_delay",
			Tango::DEV_LONG, Tango::READ_WRITE) {};
	~on_delayAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<AlarmManager *>(dev))->read_on_delay(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<AlarmManager *>(dev))->write_on_delay(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<AlarmManager *>(dev))->is_on_delay_allowed(ty);}
};

//	Attribute off_delay class definition
class off_delayAttrib: public Tango::Attr
{
public:
	off_delayAttrib():Attr("off_delay",
			Tango::DEV_LONG, Tango::READ_WRITE) {};
	~off_delayAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<AlarmManager *>(dev))->read_off_delay(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<AlarmManager *>(dev))->write_off_delay(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<AlarmManager *>(dev))->is_off_delay_allowed(ty);}
};

//	Attribute on_command class definition
class on_commandAttrib: public Tango::Attr
{
public:
	on_commandAttrib():Attr("on_command",
			Tango::DEV_STRING, Tango::READ_WRITE) {};
	~on_commandAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<AlarmManager *>(dev))->read_on_command(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<AlarmManager *>(dev))->write_on_command(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<AlarmManager *>(dev))->is_on_command_allowed(ty);}
};

//	Attribute off_command class definition
class off_commandAttrib: public Tango::Attr
{
public:
	off_commandAttrib():Attr("off_command",
			Tango::DEV_STRING, Tango::READ_WRITE) {};
	~off_commandAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<AlarmManager *>(dev))->read_off_command(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<AlarmManager *>(dev))->write_off_command(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<AlarmManager *>(dev))->is_off_command_allowed(ty);}
};

//	Attribute enabled class definition
class enabledAttrib: public Tango::Attr
{
public:
	enabledAttrib():Attr("enabled",
			Tango::DEV_BOOLEAN, Tango::READ_WRITE) {};
	~enabledAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<AlarmManager *>(dev))->read_enabled(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<AlarmManager *>(dev))->write_enabled(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<AlarmManager *>(dev))->is_enabled_allowed(ty);}
};

//	Attribute handler class definition
class handlerAttrib: public Tango::Attr
{
public:
	handlerAttrib():Attr("handler",
			Tango::DEV_STRING, Tango::READ_WRITE) {};
	~handlerAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<AlarmManager *>(dev))->read_handler(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<AlarmManager *>(dev))->write_handler(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<AlarmManager *>(dev))->is_handler_allowed(ty);}
};

//	Attribute url class definition
class urlAttrib: public Tango::Attr
{
public:
	urlAttrib():Attr("url",
			Tango::DEV_STRING, Tango::READ_WRITE) {};
	~urlAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<AlarmManager *>(dev))->read_url(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<AlarmManager *>(dev))->write_url(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<AlarmManager *>(dev))->is_url_allowed(ty);}
};

//	Attribute alarmList class definition
class alarmListAttrib: public Tango::SpectrumAttr
{
public:
	alarmListAttrib():SpectrumAttr("alarmList",
			Tango::DEV_STRING, Tango::READ, 10000) {};
	~alarmListAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<AlarmManager *>(dev))->read_alarmList(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<AlarmManager *>(dev))->is_alarmList_allowed(ty);}
};

//	Attribute alarmFrequency class definition
class alarmFrequencyAttrib: public Tango::SpectrumAttr
{
public:
	alarmFrequencyAttrib():SpectrumAttr("alarmFrequency",
			Tango::DEV_DOUBLE, Tango::READ, 10000) {};
	~alarmFrequencyAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<AlarmManager *>(dev))->read_alarmFrequency(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<AlarmManager *>(dev))->is_alarmFrequency_allowed(ty);}
};

//	Attribute handlerStatus class definition
class handlerStatusAttrib: public Tango::SpectrumAttr
{
public:
	handlerStatusAttrib():SpectrumAttr("handlerStatus",
			Tango::DEV_STRING, Tango::READ, 1000) {};
	~handlerStatusAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<AlarmManager *>(dev))->read_handlerStatus(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<AlarmManager *>(dev))->is_handlerStatus_allowed(ty);}
};


//=========================================
//	Define classes for commands
//=========================================
//	Command Load class definition
class LoadClass : public Tango::Command
{
public:
	LoadClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	LoadClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~LoadClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<AlarmManager *>(dev))->is_Load_allowed(any);}
};

//	Command Remove class definition
class RemoveClass : public Tango::Command
{
public:
	RemoveClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	RemoveClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~RemoveClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<AlarmManager *>(dev))->is_Remove_allowed(any);}
};

//	Command Modify class definition
class ModifyClass : public Tango::Command
{
public:
	ModifyClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	ModifyClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~ModifyClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<AlarmManager *>(dev))->is_Modify_allowed(any);}
};

//	Command GetAlarmInfo class definition
class GetAlarmInfoClass : public Tango::Command
{
public:
	GetAlarmInfoClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	GetAlarmInfoClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~GetAlarmInfoClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<AlarmManager *>(dev))->is_GetAlarmInfo_allowed(any);}
};

//	Command SearchAlarm class definition
class SearchAlarmClass : public Tango::Command
{
public:
	SearchAlarmClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	SearchAlarmClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~SearchAlarmClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<AlarmManager *>(dev))->is_SearchAlarm_allowed(any);}
};

//	Command ReLoadAll class definition
class ReLoadAllClass : public Tango::Command
{
public:
	ReLoadAllClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	ReLoadAllClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~ReLoadAllClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<AlarmManager *>(dev))->is_ReLoadAll_allowed(any);}
};

//	Command ResetStatistics class definition
class ResetStatisticsClass : public Tango::Command
{
public:
	ResetStatisticsClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	ResetStatisticsClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~ResetStatisticsClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<AlarmManager *>(dev))->is_ResetStatistics_allowed(any);}
};

//	Command LoadConf class definition
class LoadConfClass : public Tango::Command
{
public:
	LoadConfClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	LoadConfClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~LoadConfClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<AlarmManager *>(dev))->is_LoadConf_allowed(any);}
};

//	Command SearchAlarmConf class definition
class SearchAlarmConfClass : public Tango::Command
{
public:
	SearchAlarmConfClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	SearchAlarmConfClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~SearchAlarmConfClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<AlarmManager *>(dev))->is_SearchAlarmConf_allowed(any);}
};

//	Command ModifyConf class definition
class ModifyConfClass : public Tango::Command
{
public:
	ModifyConfClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	ModifyConfClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~ModifyConfClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<AlarmManager *>(dev))->is_ModifyConf_allowed(any);}
};


/**
 *	The AlarmManagerClass singleton definition
 */

#ifdef _TG_WINDOWS_
class __declspec(dllexport)  AlarmManagerClass : public Tango::DeviceClass
#else
class AlarmManagerClass : public Tango::DeviceClass
#endif
{
	/*----- PROTECTED REGION ID(AlarmManagerClass::Additionnal DServer data members) ENABLED START -----*/
	
	
	/*----- PROTECTED REGION END -----*/	//	AlarmManagerClass::Additionnal DServer data members

	//	Class properties data members
	public:
		//	MaxSearchSize:	Max size of search result
		Tango::DevLong	maxSearchSize;
	public:
		//	write class properties data members
		Tango::DbData	cl_prop;
		Tango::DbData	cl_def_prop;
		Tango::DbData	dev_def_prop;
	
		//	Method prototypes
		static AlarmManagerClass *init(const char *);
		static AlarmManagerClass *instance();
		~AlarmManagerClass();
		Tango::DbDatum	get_class_property(string &);
		Tango::DbDatum	get_default_device_property(string &);
		Tango::DbDatum	get_default_class_property(string &);
	
	protected:
		AlarmManagerClass(string &);
		static AlarmManagerClass *_instance;
		void command_factory();
		void attribute_factory(vector<Tango::Attr *> &);
		void pipe_factory();
		void write_class_property();
		void set_default_property();
		void get_class_property();
		string get_cvstag();
		string get_cvsroot();
	
	private:
		void device_factory(const Tango::DevVarStringArray *);
		void create_static_attribute_list(vector<Tango::Attr *> &);
		void erase_dynamic_attributes(const Tango::DevVarStringArray *,vector<Tango::Attr *> &);
		vector<string>	defaultAttList;
		Tango::Attr *get_attr_object_by_name(vector<Tango::Attr *> &att_list, string attname);
};

}	//	End of namespace

#endif   //	AlarmManager_H
